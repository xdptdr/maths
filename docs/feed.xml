<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/maths/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/maths/" rel="alternate" type="text/html" /><updated>2018-09-06T14:05:34+02:00</updated><id>http://localhost:4000/maths/</id><title type="html">xdptdr’s maths blog</title><subtitle>A blog about maths</subtitle><entry><title type="html">Fixed-point combinator</title><link href="http://localhost:4000/maths/2018/09/06/fixed-point_combinator.html" rel="alternate" type="text/html" title="Fixed-point combinator" /><published>2018-09-06T08:00:00+02:00</published><updated>2018-09-06T08:00:00+02:00</updated><id>http://localhost:4000/maths/2018/09/06/fixed-point_combinator</id><content type="html" xml:base="http://localhost:4000/maths/2018/09/06/fixed-point_combinator.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed-point_combinator&quot; target=&quot;_blank&quot;&gt;Wikipedia link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\DeclareMathOperator{\fix}{fix}&lt;/script&gt;Fixed point combinators occurs in combinatory logic in computer science.&lt;/p&gt;

&lt;p&gt;A fixed point combinator is a higher-order function.&lt;/p&gt;

&lt;p&gt;For any function &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;, if &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; has an attractive fixed point, the fixed-point combinator returns the fixed-point of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The output of a fixed point combinator is a solution to the equations &lt;script type=&quot;math/tex&quot;&gt;x=f\,x&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;\fix&lt;/script&gt; is a fixed-point combinator, then for any function &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;, it satisfies the equation &lt;script type=&quot;math/tex&quot;&gt;\fix f=f(\fix f)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;In lambda calculus, the fixed-point combinator &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; is defined as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Y=\lambda f.(\lambda x.f(x\,x))(\lambda x.f(x\,x))&lt;/script&gt;

&lt;p&gt;The Y combinator can be used to formally defined recursive functions in functional programming.&lt;/p&gt;

&lt;p&gt;Curry’s paradox states that untyped lambda calculus is unsound as a deductive system, because the Y combinator allows an anonymous expression to represent zero or many values, which is inconsistent with mathematical logic.&lt;/p&gt;

&lt;p&gt;The Y combinator usually does not terminate when applied to a function of one variable.&lt;/p&gt;

&lt;p&gt;The Y combinator can be used to implement recursion with functions of two variables, where the second variable can be used as a counter, so that the resulting function behaves like classical loops in imperative programming languages.&lt;/p&gt;

&lt;p&gt;In lambda calculus, recursion can only be achieved by passing functions as parameters.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The fixed point combinator is used in general mathematics, untyped lambda calculus, typed lambda caculus, functional programming and imperative programming.&lt;/p&gt;

&lt;p&gt;When the function refers to its parameters ins such way that other calls to the functions are invoked, the computation may never get started.&lt;/p&gt;

&lt;p&gt;The type return by the combinator is the type returned by the function being fixed.&lt;/p&gt;

&lt;p&gt;In untyped lambda calculus, the function can be expressed using Church encoding, in which case some lambda terms are considered as values defining functions, and performing the computation with beta-reductions yields a lambda term which is the fixed point value.&lt;/p&gt;

&lt;p&gt;Mathematicians and programmers interprets fixed-point combinators differently, because mathematicians see expressing satisfying the fixed point equation, while programmers regards it as a way of implementing recursion.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Values and domains&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This expression seems important but makes no sense to me.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f\,x=\frac{-1}{x}\land Y\,f=x&lt;/script&gt;

&lt;p&gt;Beta-reduction of the lambda terms may loop forever, never reaching a normal form.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Function versus implementation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mathematics define functions according to their extensional properties, which means that two functions are equal when they compute the same values.&lt;/p&gt;

&lt;p&gt;In programming, function equality is an intensional property, and two different functions (implementations) will be considered as equal in mathematics.&lt;/p&gt;

&lt;p&gt;A lambda calulus function is an implementation of a mathematical function.&lt;/p&gt;

&lt;p&gt;In lambda calculus, there are several combinators which satisfy the fixed-point equation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is a combinator&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Combinator logic is a higher-order function theory.&lt;/p&gt;

&lt;p&gt;A combinator is a closed lambda expression.&lt;/p&gt;

&lt;p&gt;Combinators may be combined in a number of interesting ways.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;A mathematical definition of the &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; combinator is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Y\,f=f(Y\,f)&lt;/script&gt;

&lt;p&gt;Applied to one-variable, this yields&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Y\,f\,x=f(Y\,f)\,x&lt;/script&gt;

&lt;p&gt;&lt;em&gt;The factorial function&lt;/em&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F f n = (\mathrm{IsZero}\,n)\,1\,(\mathrm{multiply}\,n\,(f(\mathrm{pred}\,n)))&lt;/script&gt;

&lt;p&gt;Then&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fix F\,n = F\,(\fix F)\, n=(\mathrm{IsZero}\,n)\,1\,(\mathrm{multiply}\,n\,((\fix F)\,(\mathrm{pred}\,n)))&lt;/script&gt;

&lt;p&gt;Define &lt;script type=&quot;math/tex&quot;&gt;\mathrm{fact}=\fix F&lt;/script&gt; and&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathrm{fact}\,n = F\,(\fix F)\, n=(\mathrm{IsZero}\,n)\,1\,(\mathrm{multiply}\,n\,(\mathrm{fact}\,(\mathrm{pred}\,n)))&lt;/script&gt;

&lt;h2 id=&quot;fixed-point-combinators-in-lambda-calculus&quot;&gt;Fixed point combinators in lambda calculus&lt;/h2&gt;

&lt;p&gt;Haskell B. Curry defined the &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; combinator as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Y=\lambda f.(\lambda x.f(x\, x))\,(\lambda x.f(x\, x))&lt;/script&gt;

&lt;p&gt;Beta reduction gives:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;Y\,g=\lambda f.(\lambda x.f(x\, x))\,(\lambda x.f(x\, x))\,g&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;Y\,g=(\lambda x.g(x\, x))\,(\lambda x.g(x\, x))&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;Y\,g=g((\lambda x.g(x\, x))\,(\lambda x.g(x\, x)))&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;Y\,g=g(Y\,g)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Equivalent definition of a fixed-point combinator&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;x=f\, x\land y\,f=x&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathrm{let}\,x=f\,x\,\mathrm{in}\,y\,f=x&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;y\,f=\mathrm{let}\,x=f\,x\,\mathrm{in}\,x&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;y=\lambda f.\mathrm{let}\,x=f\,x\mathrm{in}x&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In the previous, the following relations have been used:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;f\,x=y\Leftrightarrow f=\lambda x.y&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;(\exists x E\land F)\Leftrightarrow\mathrm{let}\,x\,\colon\,E\,\mathrm{in}\,F&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;x\notin\mathrm{FV}(E)\land x\in\mathrm{FV}(F)\rightarrow\mathrm{let}\,x\,\colon\,G\,\mathrm{in}\,E\,F=E(\mathrm{let}\,x\,\colon\,G\,\mathrm{in}\,F)&lt;/script&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It seems that the language and the symbolism in this section come from various different formalisms.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Derivation of the Y combinator&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Try to make sense of the following.&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\lambda f.\mathrm{let}\,x=f\,x\,\mathrm{in}\,x&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\lambda f.\mathrm{let}\,y\,z=f(y\,z)\,\mathrm{in}\,y\,z&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\lambda f.\mathrm{let}\,y\,z=f(y\,z)\,\mathrm{in}\,y\,y&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\lambda f.\mathrm{let}\,y\,z=f(z\,z)\,\mathrm{in}\,y\,y&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;f\,x=y\Leftrightarrow f=\lambda x.y&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\lambda f.\mathrm{let}\,y=\lambda z.f(z z)\,\mathrm{in}\,y\,y&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;n\notin\mathrm{FV}(E)\rightarrow(\mathrm{let}\,n=E\,\mathrm{in}\,L\Leftrightarrow(\lambda n.L)\,E)&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\lambda f.(\lambda y.y\,y)\,(\lambda z.f\,(z\,z))&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\lambda f.(\lambda z.f(z\,z))\,(\lambda z.f\,(z\,z))&lt;/script&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Other fixed-point combinators&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The set of fixed-point combinators of untyped lambda calculus is recursively enumerable.&lt;/p&gt;

&lt;p&gt;In SKI-calculus: &lt;script type=&quot;math/tex&quot;&gt;Y=S(K(SII))(S(S(KS)K)(K(SII)))&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;John Tromp’s SK-calculus: &lt;script type=&quot;math/tex&quot;&gt;Y^\prime=SSK(S(K(SS(S(SSK))))K)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;Y'=(\lambda x.\lambda y.xyx)(\lambda y.\lambda x.y(xyx))&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;X=\lambda f.(\lambda x.xx)(\lambda x.f(xx))&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Turing fixed-point combinator &lt;script type=&quot;math/tex&quot;&gt;\Theta=(\lambda x.\lambda y.(y(xxy)))(\lambda x.\lambda y.(y(xxy)))&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;{}&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\Theta_v=(\lambda x.\lambda y.(y(\lambda z.xxyz)))(\lambda x.\lambda y.(y(\lambda z.xxyz)))&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For mutual recursion, there is a poyvariadic fix-point combinator which is denoted &lt;script type=&quot;math/tex&quot;&gt;Y^\ast&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Strict fixed point combinator&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Z combinator work in strict eager languages, where applicative evaluatoin order is applied.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Zgv=g(Zg)v&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Z=\lambda f.(\lambda x.f(\lambda v.xxv))(\lambda x.f(\lambda v.xxv))&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Non-standard fixed-point combinators&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some terms in untyped lambda calculus have the same Böhm tree as fixed point combinator, i.e. they have the same infinite extensions.&lt;/p&gt;

&lt;p&gt;Some non-standard fixed-point combinators fail to satisfy the fixed-point equation.&lt;/p&gt;

&lt;p&gt;Example: &lt;script type=&quot;math/tex&quot;&gt;N=BM(B(BM)B)&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;B=\lambda x,y,z.x(yz)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;M=\lambda x.xx&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The set of non-standard fixed-point combinators is not recursively enumerable.&lt;/p&gt;

&lt;h2 id=&quot;implementation-in-other-languages&quot;&gt;Implementation in other languages&lt;/h2&gt;

&lt;p&gt;The structure of the Y combinator is contrained by the limitations of lambda calculus.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lazy functional implementation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Haskell allow the definition of fixed points of data constructors with lazy datatypes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Strict functional implementation&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Imperative language implementation&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;fixer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;fact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;typing&quot;&gt;Typing&lt;/h2&gt;

&lt;p&gt;In polymorphic lambda calculus such as System F, a polymorphic fixed-point combinator has type &lt;script type=&quot;math/tex&quot;&gt;\forall a.(a\to a)\to a&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; a type variable.&lt;/p&gt;

&lt;p&gt;An simply typed lambda calculus, fixed-point combinators cannot be typed, and something can be done when extending the calculus with recursive types.&lt;/p&gt;

&lt;p&gt;Interesting examples in Haskell and Ocaml omitted.&lt;/p&gt;</content><author><name></name></author><summary type="html">Wikipedia link</summary></entry><entry><title type="html">Limit (category theory)</title><link href="http://localhost:4000/maths/2018/09/06/Limit_category_theory.html" rel="alternate" type="text/html" title="Limit (category theory)" /><published>2018-09-06T08:00:00+02:00</published><updated>2018-09-06T08:00:00+02:00</updated><id>http://localhost:4000/maths/2018/09/06/Limit_category_theory</id><content type="html" xml:base="http://localhost:4000/maths/2018/09/06/Limit_category_theory.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Limit_(category_theory)&quot; target=&quot;_blank&quot;&gt;Wikipedia link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\DeclareMathOperator{\ob}{ob}
\DeclareMathOperator{\hom}{hom}&lt;/script&gt;In category theory, limits captures essential properties of universal constructions such as products, pullbacks, and inverse limits.&lt;/p&gt;

&lt;p&gt;The dual notion of colimit generalizes disjoint unions, direct sums, coproducts, pushouts and direct limits.&lt;/p&gt;

&lt;p&gt;Limits exist at the same level of abstraction as universal properties and adjoint functors.&lt;/p&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;

&lt;p&gt;A diagram to a category &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; is a functor &lt;script type=&quot;math/tex&quot;&gt;F:J\to C&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;J&lt;/script&gt; is an index category.&lt;/p&gt;

&lt;p&gt;A diagram is small when &lt;script type=&quot;math/tex&quot;&gt;J&lt;/script&gt; is small.&lt;/p&gt;

&lt;p&gt;A diagrma is finite when &lt;script type=&quot;math/tex&quot;&gt;J&lt;/script&gt; is finite.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Limits&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;F:J\to C&lt;/script&gt; be a diagram from &lt;script type=&quot;math/tex&quot;&gt;J&lt;/script&gt; to a category &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;A cone to &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; is an object &lt;script type=&quot;math/tex&quot;&gt;N\in\ob(C)&lt;/script&gt; with a family &lt;script type=&quot;math/tex&quot;&gt;\psi_X:N\to F(X)&lt;/script&gt; of arrows indexed by &lt;script type=&quot;math/tex&quot;&gt;X=\ob{J}&lt;/script&gt; such that for every arrow &lt;script type=&quot;math/tex&quot;&gt;f\in\hom_J(X,Y)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;F(f)\circ\psi_X=\psi_Y&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;A limit of &lt;script type=&quot;math/tex&quot;&gt;F:J\to C&lt;/script&gt; is a cone &lt;script type=&quot;math/tex&quot;&gt;(L,\varphi)&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; such that for any other cone &lt;script type=&quot;math/tex&quot;&gt;(N,\psi)&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;, there’s a unique arrow &lt;script type=&quot;math/tex&quot;&gt;u:N\to L&lt;/script&gt; such that for all &lt;script type=&quot;math/tex&quot;&gt;X\in\ob(J)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\varphi_X\circ u=\psi_X&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In other words, the cone &lt;script type=&quot;math/tex&quot;&gt;(N,\psi)&lt;/script&gt; factors throught the cone &lt;script type=&quot;math/tex&quot;&gt;(L,\varphi)&lt;/script&gt; with the unique factorization &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt;, which is called the mediating arrow.&lt;/p&gt;

&lt;p&gt;Limits are referred to as universal cones, because they are characterized by a universal property.&lt;/p&gt;

&lt;p&gt;A limit allows any other cone to factory through it, but is sufficiently specific that only one factorization is possible for every cone.&lt;/p&gt;

&lt;p&gt;Limits are the terminal objects in the category of cones to &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Some diagrams may not have a limit, but when a diagram does have a limit, it is unique up to isomorphism.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Colimits&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A co-cone of a diagram &lt;script type=&quot;math/tex&quot;&gt;F:J\to C&lt;/script&gt; is an object &lt;script type=&quot;math/tex&quot;&gt;N\in\ob(C)&lt;/script&gt; with a family of arrows &lt;script type=&quot;math/tex&quot;&gt;\psi_X\in\hom_C(F(X),N)&lt;/script&gt; for every &lt;script type=&quot;math/tex&quot;&gt;X\in\ob(J)&lt;/script&gt; such that for every &lt;script type=&quot;math/tex&quot;&gt;Y\in\ob(J)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;f\in\hom_J(X,Y)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\psi_Y\circ F(f)=\psi_X&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;A colimit of &lt;script type=&quot;math/tex&quot;&gt;F:J\to C&lt;/script&gt; is a co-cone &lt;script type=&quot;math/tex&quot;&gt;(L,\varphi)&lt;/script&gt; of &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; such that for every other co-cone &lt;script type=&quot;math/tex&quot;&gt;(N,\psi)&lt;/script&gt; of &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;, there is a unique &lt;script type=&quot;math/tex&quot;&gt;u\in\hom_C(L,N)&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;u\circ\phi_X=\psi_X&lt;/script&gt; for all &lt;script type=&quot;math/tex&quot;&gt;X\in\ob(J)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Colimits are universal co-cones, which are the inital objects of the category of co-cones from &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;, and are unique up to isomorphism.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Limits&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If J is the empty category, there is only one diagram of shape J. A cone to the empty diagram is essentially just an object from &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt;. The limit of &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; is an object that is uniquely factored through by every other object. Such an object is a terminal object.&lt;/p&gt;

&lt;p&gt;If J is a discrete category, then the diagram is a family of objects of &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt;, and the limit is called the product of these objects. The cone contains the projections of the product. If the diagram is to a constant functor, the limit is the &lt;script type=&quot;math/tex&quot;&gt;J&lt;/script&gt;th power.&lt;/p&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;J&lt;/script&gt; has two objects &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; and two arrows &lt;script type=&quot;math/tex&quot;&gt;a\to b&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b\to a&lt;/script&gt;, the limit is the equalizer of two parallel arrows in &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;If one of the arrow is the zero morphism, the equalizer is a kernel.&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; be a digram which picks out three objects &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt;, with morphisms &lt;script type=&quot;math/tex&quot;&gt;f:X\to Z&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;g:Y\to Z&lt;/script&gt;. Then the limit of F is a pullback or a fiber product.&lt;/p&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;J&lt;/script&gt; is a directed set and &lt;script type=&quot;math/tex&quot;&gt;F:J^\mathrm{op}\to C&lt;/script&gt; is a diagram, the limit is the inverse limit or projective limit.&lt;/p&gt;

&lt;p&gt;If $J$ has an initial object &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, the limit is an object isomorphic to &lt;script type=&quot;math/tex&quot;&gt;F(i)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Limits of functions are special case of limits of filters.&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; be a topological space &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;. &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; the set of filters on &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;x\in X&lt;/script&gt; a point, &lt;script type=&quot;math/tex&quot;&gt;V(x)\in F&lt;/script&gt; the neighborhood filter of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;A\in F&lt;/script&gt; a particular filter and &lt;script type=&quot;math/tex&quot;&gt;F_{x,A}=\{G\in F\mid V(x)\cup A\subset G\}&lt;/script&gt; the set of filters finer than &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; and that converge to &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Make &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; a small and thin category by adding an arrow &lt;script type=&quot;math/tex&quot;&gt;A\to B&lt;/script&gt; if and only if &lt;script type=&quot;math/tex&quot;&gt;A\subseteq B&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Then injection &lt;script type=&quot;math/tex&quot;&gt;I_{x,A}:F_{x,A}\to F&lt;/script&gt; is a functor and the following equivalence holds:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is a topological limit of &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; iff &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; is a categorical limit of &lt;script type=&quot;math/tex&quot;&gt;I_{x,A}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Colimits&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Initial objects are colimits of empty diagrams.&lt;/p&gt;

&lt;p&gt;Coproducts are colimits of diagrams indexed by discrete categories.&lt;/p&gt;

&lt;p&gt;Copowers are colimits of constant diagrams from discrete categories.&lt;/p&gt;

&lt;p&gt;Coequalizers are colimits of parallel pairs of morphisms.&lt;/p&gt;

&lt;p&gt;Cokernels are coequalizers of a morphism and a parallel zero morphism.&lt;/p&gt;

&lt;p&gt;Pushouts are colimits of a pair of morphism with common domain.&lt;/p&gt;

&lt;p&gt;Direct limits are colimits of diagrams indexed by directed sets.&lt;/p&gt;

&lt;h2 id=&quot;properties&quot;&gt;Properties&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Existence of limits&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;TODO…&lt;/p&gt;</content><author><name></name></author><summary type="html">Wikipedia link</summary></entry><entry><title type="html">Type theory</title><link href="http://localhost:4000/maths/2018/09/05/type-theory.html" rel="alternate" type="text/html" title="Type theory" /><published>2018-09-05T08:00:00+02:00</published><updated>2018-09-05T08:00:00+02:00</updated><id>http://localhost:4000/maths/2018/09/05/type-theory</id><content type="html" xml:base="http://localhost:4000/maths/2018/09/05/type-theory.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Type_theory&quot; target=&quot;_blank&quot;&gt;Wikipedia link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A type theory is a class of formal systems.&lt;/p&gt;

&lt;p&gt;Some type theories can serve as alternatives to set theory as a foundation of mathematics.&lt;/p&gt;

&lt;p&gt;Type theory is used in mathematics, logic, and computer science.&lt;/p&gt;

&lt;p&gt;In type theory, every term has a type, and operations are restricted to terms of a certain type.&lt;/p&gt;

&lt;p&gt;Type theory is closely related to type systems in programming languages.&lt;/p&gt;

&lt;p&gt;Type theory addresses some paradoxes in some formal logics and some rewrite systems.&lt;/p&gt;

&lt;p&gt;The following type theories can serve as mathematical foundations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Alonzo Church’s typed &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-calculus&lt;/li&gt;
  &lt;li&gt;Per Marin-Löf’s intuitionistic type theory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;

&lt;p&gt;Gottlob Frege’s version of naive set theory is afflicted with Russell’s paradox.&lt;/p&gt;

&lt;p&gt;Russell proposed various theories of type to address the paradox.&lt;/p&gt;

&lt;p&gt;By 1908, Russell had a ramified theory of types with an axiom of reducibility.&lt;/p&gt;

&lt;p&gt;These are featured in Whitehead and Russel’s Principa Mathematica, which was published between 1910 and 1913.&lt;/p&gt;

&lt;p&gt;The idea is to create a hierarchy of types, then assign each mathematical entity to a type.&lt;/p&gt;

&lt;p&gt;New types are built exclusively for already defined types, i.e. there are no recursive or mutually recursive types.&lt;/p&gt;

&lt;p&gt;In 1920s, Leon Chwistek and Frank P. Ramsey propose the theory of simple types, which collapses the hierarchy of types and do not require the axiom of reducibility.&lt;/p&gt;

&lt;p&gt;Type theory is usually used in context with a term rewrite system.&lt;/p&gt;

&lt;p&gt;Alonzo Church’s simply typed lambda calculus is such a rewrite system.&lt;/p&gt;

&lt;p&gt;Church’s theory of types helps the formal system avoid the Kleene-Rosser paradox which afflicts untyped lambda calculus.&lt;/p&gt;

&lt;p&gt;Church’s simply typed lambda calculus was referred to as higher-order logic.&lt;/p&gt;

&lt;p&gt;Per Martin-Löf’s intuitionistic type theory has been the foundation used in some areas of constructive mathematics.&lt;/p&gt;

&lt;p&gt;And also for the proof assistant Agda.&lt;/p&gt;

&lt;p&gt;Thierry Coquand’s calculus of constructions is used by Coq and others.&lt;/p&gt;

&lt;p&gt;Homotopy type theory is an active area of research.&lt;/p&gt;

&lt;h2 id=&quot;basic-concepts&quot;&gt;Basic concepts&lt;/h2&gt;

&lt;p&gt;Each term has a type.&lt;/p&gt;

&lt;p&gt;There are conversion rules and reduction rule.&lt;/p&gt;

&lt;p&gt;Functions have a special reduction rule which substitutes the arguments.&lt;/p&gt;

&lt;p&gt;Multiple argument functiosn can be defined using currying.&lt;/p&gt;

&lt;h2 id=&quot;difference-from-set-theory&quot;&gt;Difference from set theory&lt;/h2&gt;

&lt;p&gt;Set theory is built on top of logic, and requires a separate system like predicate logic.&lt;/p&gt;

&lt;p&gt;In type theory, logical concepts can be encoded as types in the theory itself.&lt;/p&gt;

&lt;p&gt;In type theory, terms belong to only one type.&lt;/p&gt;

&lt;p&gt;Set theory encode numbers as sets, type theory encode numbers as functions using Church encoding or as inductive types.&lt;/p&gt;

&lt;p&gt;Set theory allows the set builder notation.&lt;/p&gt;

&lt;p&gt;Type theory is connected to constructive mathematics through the BHK interpretation, and to logic with the Curry Howard isomorphism.&lt;/p&gt;

&lt;p&gt;Some type theories are closely connected to category theory.&lt;/p&gt;

&lt;h2 id=&quot;optional-features&quot;&gt;Optional features&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Normalization&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A system of type theory is strongly normalizing if reductions performed in any order reach a normal form.&lt;/p&gt;

&lt;p&gt;If some order of redutions loop, the system is said to be weakly normalizing.&lt;/p&gt;

&lt;p&gt;Two terms are convertible if they both reduce to another term.&lt;/p&gt;

&lt;p&gt;Confluent and weakly normalizing systems can test if two terms are convertible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dependent types&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dependent types play a central role in intuitionistic type theory and in the design of functional programming languages such as&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Idris&lt;/li&gt;
  &lt;li&gt;ATS&lt;/li&gt;
  &lt;li&gt;Agda&lt;/li&gt;
  &lt;li&gt;Epigram&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Equality types&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Equality is different from convertibility, and is often denoted propositional equality.&lt;/p&gt;

&lt;p&gt;In intuitinstic type theory, the equality type is known as &lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt;. A term of type &lt;script type=&quot;math/tex&quot;&gt;I A a b&lt;/script&gt; is interpreted as meaning that &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; is equal to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Although the type &lt;script type=&quot;math/tex&quot;&gt;I nat 3 4&lt;/script&gt; is well defined, there is no term of that type.&lt;/p&gt;

&lt;p&gt;Equality starts with reflexivity : if &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is a term of type &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, then there exists a term of type &lt;script type=&quot;math/tex&quot;&gt;I X x x&lt;/script&gt;. More complicated equalities are created by performing reductions on one side but not on the other. In such a system, the equality type denotes that two values ar convertible by reductions.&lt;/p&gt;

&lt;p&gt;Inequality is usually mapped to the function that sends to the bottom type which has no values, as in the Brouwer-Heyting-Kolmogorov interpretation.&lt;/p&gt;

&lt;p&gt;Homotopy type theory differs from intuitionistic type theory mostly by its handling of the equality type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Inductive types&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Inductive types are defined with a set of base types and a set of type constructors.&lt;/p&gt;

&lt;p&gt;Certain recursive functions called on inductive types are guaranteed to terminate.&lt;/p&gt;

&lt;p&gt;Coinductive types are infinite data types created with functions that generate the next elements.&lt;/p&gt;

&lt;p&gt;Induction-induction declares an inductive type and a family of types that depend on the inductive type.&lt;/p&gt;

&lt;p&gt;Induction-recursion allows the type and recursive functions operating on it to be defined at the same time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Universe types&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many type theories have a universe type, which contains all other types but not itself.&lt;/p&gt;

&lt;p&gt;The type of the universe type is often of another different universe type, leading to a hieararchy of univere types.&lt;/p&gt;

&lt;p&gt;The hiearchy is infinite, but since statements are finite, they can only refer to a finite number of universe levels.&lt;/p&gt;

&lt;p&gt;Type universes are tricky, and some intuitionistic type theories suffered from Girard’s paradox.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Computational component&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many systems of type theory are also programming languages. Examples include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;simply-typed lambda calculus&lt;/li&gt;
  &lt;li&gt;intuitionistic type theory&lt;/li&gt;
  &lt;li&gt;the calculus of constructions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The computation is the reductions of terms using rewriting rules.&lt;/p&gt;

&lt;p&gt;Systems of type theory which have a well-behaved computational component have a simple connection to constructive mathematics through the BHK interpration.&lt;/p&gt;

&lt;p&gt;Non-constructive mathematics can be introduced with operators on continuations, such as call with current continuation, buth they usually break canonicity or parametricity.&lt;/p&gt;

&lt;h2 id=&quot;type-theories&quot;&gt;Type theories&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Simply typed lambda calculus&lt;/li&gt;
  &lt;li&gt;Intuitionistic type theory&lt;/li&gt;
  &lt;li&gt;System F&lt;/li&gt;
  &lt;li&gt;LF&lt;/li&gt;
  &lt;li&gt;Calculus of constructions&lt;/li&gt;
  &lt;li&gt;Automath&lt;/li&gt;
  &lt;li&gt;ST type theory&lt;/li&gt;
  &lt;li&gt;Combinatory logic&lt;/li&gt;
  &lt;li&gt;Lambda cube&lt;/li&gt;
  &lt;li&gt;Pure type system&lt;/li&gt;
  &lt;li&gt;Homotopy type theory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;practical-impact&quot;&gt;Practical impact&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Programming languages&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Static program analysis using type systems has a connection to type theory.&lt;/p&gt;

&lt;p&gt;Agda is a programming language which uses intuitionitic type theory for its type system.&lt;/p&gt;

&lt;p&gt;ML was developed for manipulating type theories.&lt;/p&gt;

&lt;p&gt;ML’s type system was influenced by the type theories developped with ML.&lt;/p&gt;

&lt;p&gt;LCF as something to do with ML.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mathematical foundations&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Automath used type theory to encode mathematics on a computer.
Martin-Löf developped intuitionistic type theory to encode all mathematics and serve as a new foundation for mathematics.
Homotopy type theory something something.&lt;/p&gt;

&lt;p&gt;Practitioners of category theory have some difficulties whith Zermelo-Fraenkel set theory.
Lawvere proposed the Elementary Theory of the Category of Sets (ECTS).
Homotopy theory something something.
The connections between dependent types, such as the identity type, and algebraic topoplogy (mainly homotopy) seems interesting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Proof assistants&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most research is driven by proof checkers, assistants, and automated theorem provers.&lt;/p&gt;

&lt;p&gt;LF is used by Twelf.&lt;/p&gt;

&lt;p&gt;Type theories in higher-order logic are used by the HOL family of provers and PVS.&lt;/p&gt;

&lt;p&gt;Intuitinistic type theory is used by Agda.&lt;/p&gt;

&lt;p&gt;Computational type theory is used by NuPRL.&lt;/p&gt;

&lt;p&gt;The calculus of constructions is used by Coq and Matita.&lt;/p&gt;

&lt;p&gt;LEGO and Isabelle support multiple type theories.&lt;/p&gt;

&lt;p&gt;Isable also supports ZFC.&lt;/p&gt;

&lt;p&gt;Mizar only supports set theory.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Linguistics&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Type theory is used in formal theories of semantics of natural languages, such as Montague grammar.&lt;/p&gt;

&lt;p&gt;Categorical grammars and pregroup grammars use type constructors to define the types of words.&lt;/p&gt;

&lt;p&gt;Natural language quantifiers, such as everybody and nobody, are typed as functions from sets of entities to truth-values.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Social sciences&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Gregory Bateson’s notions of double bind and logical level in social sciences is based on Russell’s theory of types.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Relation to category theory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A category can be interpreted as a type theory by identifying the objects with types (and its arrows as what ?).&lt;/p&gt;

&lt;p&gt;Cartesian closed categories correspond to the typed &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-calculus.&lt;/p&gt;

&lt;p&gt;C-monoids correspond to untyped &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-calculus.&lt;/p&gt;

&lt;p&gt;C-monoids are categories with products, exponentials, and a single non-terminal object.&lt;/p&gt;

&lt;p&gt;Locally cartesian closed categories correspond to Martin-Löf type theories.&lt;/p&gt;

&lt;p&gt;These results are part of categorical logic, which study the relationships between type theory and category theory.&lt;/p&gt;</content><author><name></name></author><summary type="html">Wikipedia link</summary></entry><entry><title type="html">Domain theory</title><link href="http://localhost:4000/maths/2018/09/05/domain-theory.html" rel="alternate" type="text/html" title="Domain theory" /><published>2018-09-05T08:00:00+02:00</published><updated>2018-09-05T08:00:00+02:00</updated><id>http://localhost:4000/maths/2018/09/05/domain-theory</id><content type="html" xml:base="http://localhost:4000/maths/2018/09/05/domain-theory.html">&lt;h2 id=&quot;domain-theory&quot;&gt;Domain theory&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_theory&quot; target=&quot;_blank&quot;&gt;Wikipedia link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Domain theory focuses on partially ordered sets with additional properties.&lt;/p&gt;

&lt;p&gt;Partially ordered sets are also called posets.&lt;/p&gt;

&lt;p&gt;The posets with additional properties are called domains.&lt;/p&gt;

&lt;p&gt;Domain theory is a branch of order theory.&lt;/p&gt;

&lt;p&gt;Domain theory is used in computer science to specify denotational semantics of functional programming languages.&lt;/p&gt;

&lt;p&gt;Domain theory formalizes the concepts of approximation and convergence, and has close relations to topology.&lt;/p&gt;

&lt;p&gt;Metric spaces are an alternative approach to denotational semantics.&lt;/p&gt;

&lt;p&gt;The study of domains was initiated by Dana Scott in the late 1960s.&lt;/p&gt;

&lt;p&gt;The goal was a denotational semantics of the lambda calculus.&lt;/p&gt;

&lt;p&gt;Lambda calculus allows the definition of functions, functions which take functions as input and fixed-point combinators.&lt;/p&gt;

&lt;p&gt;The &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; combinator is the most well known fixed-point combinator.&lt;/p&gt;

&lt;p&gt;Fixed-point combinators are such that for any function &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;f(Y(f))=Y(f)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;To formulate a denotational semantics for lamda calculus, the usual steps involve constructing a model for the lamda calculus, which links the syntactic system to the notational system.&lt;/p&gt;

&lt;p&gt;An example of such a model is the combinator calculus.&lt;/p&gt;

&lt;p&gt;In the combinator calculus, the elements are functions from functions to functions.&lt;/p&gt;

&lt;p&gt;For the elements to be of arbitrary domain and range, there could be only partial functions.&lt;/p&gt;

&lt;p&gt;Scott formalizes the notion of incomplete information to represent computations that have not yet returned a result.&lt;/p&gt;

&lt;p&gt;To each domain of computation, an undefined output is added which represents the result of a computation that never ends.&lt;/p&gt;

&lt;p&gt;The domain of computation is equipped with an ordering relation in which the undefined result is the least element.&lt;/p&gt;

&lt;p&gt;In lambda calculus, the set of functions which have least fixed points, together with an appropriate ordering, is a domain in the sense of the domain theory.&lt;/p&gt;

&lt;p&gt;These domains contain their own function spaces, i.e. all the functions can be applied to themselves.&lt;/p&gt;

&lt;p&gt;The domains of computation are partially ordered, and represents in this way a hierarchy of information.&lt;/p&gt;

&lt;p&gt;Higher elements are more specific and contain more information.&lt;/p&gt;

&lt;p&gt;Lower elements represent incomplete knowledge or intermediate results.&lt;/p&gt;

&lt;p&gt;Computation is modeled by applying monotone functions on elements of the domain to refine a result.&lt;/p&gt;

&lt;p&gt;Reaching a fixed point = finishing the computation.&lt;/p&gt;

&lt;p&gt;Fixed points of monotone functions can be guaranteed to exist, and, with additional restrictions, they can be approximated from below.&lt;/p&gt;

&lt;p&gt;Domains often do not have a greatest element.&lt;/p&gt;

&lt;p&gt;A directed subset is a non-empty subset of the order in which any two elements have an upper bound which is also in the subset.&lt;/p&gt;

&lt;p&gt;Directed subsets can be viewed as consistent specifications.&lt;/p&gt;

&lt;p&gt;Directed subsets can be compared with the notion of convergent sequence in analysis, where each element is more specific than the preceding one.&lt;/p&gt;

&lt;p&gt;In the theory of metric spaces, sequences play a role that is in many aspects analogous to the role of directed sets in domain theory.&lt;/p&gt;

&lt;p&gt;The limit of a directed set is its least upper bound.&lt;/p&gt;

&lt;p&gt;There are directed set with no least upper bound.&lt;/p&gt;

&lt;p&gt;Directed-complete partial orders are orders in which all directed set have a least upper bound, i.e. they are such that all consistent specifications converge.&lt;/p&gt;

&lt;p&gt;There is a least element, which represents the state of no information.&lt;/p&gt;

&lt;p&gt;Scott-continous functions are monotonic functions maps directed sets to directed sets and preserve directed suprema.&lt;/p&gt;

&lt;p&gt;Compact elements cannot be obtained as a limit of a directed set in which they already occur.&lt;/p&gt;

&lt;p&gt;An algebraic poset has a base of compact elements.&lt;/p&gt;

&lt;p&gt;An &lt;script type=&quot;math/tex&quot;&gt;\omega&lt;/script&gt;-continous poset has a countable base.&lt;/p&gt;

&lt;p&gt;An  &lt;script type=&quot;math/tex&quot;&gt;\omega&lt;/script&gt;-algebraic order has a countable base of finite elements.&lt;/p&gt;

&lt;p&gt;A flat domain is made of incomparable elements with a bottom element which is smaller than all other elements.&lt;/p&gt;

&lt;p&gt;Domains of special interest are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;continuous posets&lt;/li&gt;
  &lt;li&gt;algebraic posets&lt;/li&gt;
  &lt;li&gt;continuous cpos&lt;/li&gt;
  &lt;li&gt;algebraic cpos&lt;/li&gt;
  &lt;li&gt;continuous lattices&lt;/li&gt;
  &lt;li&gt;algebraic lattices&lt;/li&gt;
  &lt;li&gt;Scott domains&lt;/li&gt;
  &lt;li&gt;SFP-domains&lt;/li&gt;
  &lt;li&gt;L-domains&lt;/li&gt;
  &lt;li&gt;bifinite domains&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A poset is a dcpo iff every chain has a supremum.&lt;/p&gt;

&lt;p&gt;Kleene fixed-point theorem : Continuous functions have a least fixed point, which is the least upper bound of all finite iterations of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; on the least element.&lt;/p&gt;</content><author><name></name></author><summary type="html">Domain theory</summary></entry><entry><title type="html">Category theory</title><link href="http://localhost:4000/maths/2018/09/05/category-theory.html" rel="alternate" type="text/html" title="Category theory" /><published>2018-09-05T08:00:00+02:00</published><updated>2018-09-05T08:00:00+02:00</updated><id>http://localhost:4000/maths/2018/09/05/category-theory</id><content type="html" xml:base="http://localhost:4000/maths/2018/09/05/category-theory.html">&lt;h2 id=&quot;category-theory&quot;&gt;Category theory&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Category_theory&quot; target=&quot;_blank&quot;&gt;Wikipedia link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A category is a labeled directed graph, whose nodes are called objects, and whose labelled directed edges are called arrows.
The arrows are also called morphisms.&lt;/p&gt;

&lt;p&gt;The arrows can be composed associatively.
There is an identity arrow for each object.&lt;/p&gt;

&lt;p&gt;Sets, rings and groups can be formalized in the language of category theory.&lt;/p&gt;

&lt;p&gt;Category theory was introduced by Samuel Eilenberg and Saunders Mac Lane.
They defined the concepts of categories, functors, and natural transformations
They did it in 1942-45.
They were studying algebraic topology.
The goal was to understand the processes that preserve mathematical structure.&lt;/p&gt;

&lt;p&gt;Category theory has practical applications in programming language theory.
The usage of monads in functional programming uses category theory.&lt;/p&gt;

&lt;p&gt;Category theory can be used as an axiomatic foundation for mathematics.&lt;/p&gt;

&lt;p&gt;In the categories of sets, the objects are sets and the arrows are the functions from one set to another.&lt;/p&gt;

&lt;p&gt;In theoretical computer science, there is the category of types and the category of database schemas.&lt;/p&gt;

&lt;p&gt;In mathematical physics, there is the category of vector spaces.&lt;/p&gt;

&lt;p&gt;In linear algebra, there is the categories of matrices.&lt;/p&gt;

&lt;p&gt;Robert Rosen’s metabolism-repair model of autonomous living organisms uses category theory.&lt;/p&gt;

&lt;p&gt;In the category of groups, the objects are groups and the arrows are group homomorphisms.&lt;/p&gt;

&lt;p&gt;In topology, in the category of topological spaces, the objects are topological spaces and the arrows are continuous maps.&lt;/p&gt;

&lt;p&gt;In manifold theory, the arrows are smooth functions.&lt;/p&gt;

&lt;p&gt;In the category of homotopies between pointed topological spaces, the arrows are not structure preserving set functions.&lt;/p&gt;

&lt;p&gt;The theory of allegories replaces functions with relations.&lt;/p&gt;

&lt;p&gt;In the category of categories, the objects are categories and the arrows are functors.&lt;/p&gt;

&lt;p&gt;Diagram chasing is a visual method of arguing with abstract arrows joined in diagrams.&lt;/p&gt;

&lt;p&gt;Functors can dfined categorical diagrams and sequences.&lt;/p&gt;

&lt;p&gt;A functor associates to every object of one category an object from another category, and to every morphism of one category a morphism from another category.&lt;/p&gt;

&lt;p&gt;The idea of the category of categories first surfaced in algebraic topology.&lt;/p&gt;

&lt;p&gt;Some topological questions can be translated into algebraic questions.&lt;/p&gt;

&lt;p&gt;The fundamental group of a topological space can be expressed as functors to the category of groupoids.&lt;/p&gt;

&lt;p&gt;The fundamental groupoid of a topological space can be expressed as functors to the category of groupoids.&lt;/p&gt;

&lt;p&gt;Some diagrammatic or sequential constructions are often naturally related.&lt;/p&gt;

&lt;p&gt;Natural transformations map functors to other functors.&lt;/p&gt;

&lt;p&gt;An arrow between two functors is a natural transformation if it satisfies naturality or commutativity conditions. &lt;script type=&quot;math/tex&quot;&gt;\DeclareMathOperator{\ob}{ob}
\DeclareMathOperator{\hom}{hom}
\DeclareMathOperator{\mor}{mor}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; be a category. Its objects are denoted &lt;script type=&quot;math/tex&quot;&gt;\ob(C)&lt;/script&gt; and its arrows are denoted &lt;script type=&quot;math/tex&quot;&gt;\hom(C)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;script type=&quot;math/tex&quot;&gt;a\in C&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b\in C&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\hom(a,b)&lt;/script&gt; denotes the arrows from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;. They can also be denoted &lt;script type=&quot;math/tex&quot;&gt;\hom_C(a,b)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\mor(a,b)&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;C(a,b)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;A category theory also has a composition operation &lt;script type=&quot;math/tex&quot;&gt;\circ&lt;/script&gt; which is such that for &lt;script type=&quot;math/tex&quot;&gt;a\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;a\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;c\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;f\in\hom(a,b)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;g\in\hom(b,c)&lt;/script&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g\circ f\in\hom(a,c)&lt;/script&gt;

&lt;p&gt;The composition operation is associative and for each &lt;script type=&quot;math/tex&quot;&gt;a\in\ob(C)&lt;/script&gt;, there is a unique &lt;script type=&quot;math/tex&quot;&gt;1_a\in\hom(a,a)&lt;/script&gt; which is such that for every &lt;script type=&quot;math/tex&quot;&gt;b\in C&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;f\in\hom(a,b)&lt;/script&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;1_b\circ f=f=f\circ 1_a&lt;/script&gt;

&lt;p&gt;Relation among arrows are often depicted using commutative diagrams.&lt;/p&gt;

&lt;p&gt;Special morphisms include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;monomorphisms: &lt;script type=&quot;math/tex&quot;&gt;f\circ g_1=f\circ g_2\Rightarrow g_1=g_2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;epimorphisms: &lt;script type=&quot;math/tex&quot;&gt;g_1\circ f=g_2\circ f\Rightarrow g_1=g_2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;isomorphisms: There is &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;f\circ g=1_b&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;g\circ g=1_a&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;endomorphisms: These are those which belong ot &lt;script type=&quot;math/tex&quot;&gt;\hom(a,a)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;automorphisms: These are the endormorphisms which are also isomorphisms&lt;/li&gt;
  &lt;li&gt;retractions: If there is &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;f\circ g=1_b&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;sections: If there is &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;g\circ f=1_a&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Retractions are a subset of the epimorphisms.&lt;/p&gt;

&lt;p&gt;Sections are a subset of the monomorphisms.&lt;/p&gt;

&lt;p&gt;Isomorphisms are epimorphisms which are also sections.&lt;/p&gt;

&lt;p&gt;Isomorphisms are monomorphisms which are also retractions.&lt;/p&gt;

&lt;p&gt;Functors are arrows in the category of (small) categories.&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; be categories.&lt;/p&gt;

&lt;p&gt;A functor &lt;script type=&quot;math/tex&quot;&gt;F:C\to D&lt;/script&gt; from &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; is such that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For each &lt;script type=&quot;math/tex&quot;&gt;x\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;F(x)\in\ob(D)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Covariance : for each &lt;script type=&quot;math/tex&quot;&gt;a\in\ob(C)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b\in\ob(C)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;f\in\hom_C(a,b)&lt;/script&gt;,&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(f)\in\hom_D(F(a),F(b))&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Contravariance : for each &lt;script type=&quot;math/tex&quot;&gt;a\in\ob(C)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b\in\ob(C)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;f\in\hom_C(a,b)&lt;/script&gt;,&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(f)\in\hom_D(F(b),F(a))&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;For each &lt;script type=&quot;math/tex&quot;&gt;x\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;F(1_X)=1_{F(X)}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;For &lt;script type=&quot;math/tex&quot;&gt;x\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;y\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;z\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;f\in\hom_C(x,y)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;g\in\hom_C(y,z)&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(g\circ f)=F(g)\circ F(f)&lt;/script&gt;

&lt;p&gt;A functor must be either covariant or contravariant.&lt;/p&gt;

&lt;p&gt;A contravariant functor acts as a covariant functor from the opposite category &lt;script type=&quot;math/tex&quot;&gt;C^{\mathrm{op}}&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;A natural transformation is a relation between two functors.&lt;/p&gt;

&lt;p&gt;Functors describe natural constructions.&lt;/p&gt;

&lt;p&gt;Natural transformations describe natural homomorphisms.&lt;/p&gt;

&lt;p&gt;The fact that two constructions (functors) describe the same result is expressed by a natural isomorphism between the two functors.&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; be covariant functors between two categories &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; be a natural transformation from &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;. &lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; is such that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For each &lt;script type=&quot;math/tex&quot;&gt;X\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\eta_X\in\hom_D(F(X),G(X))&lt;/script&gt; and for every &lt;script type=&quot;math/tex&quot;&gt;Y\in\ob(C)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;f\in\hom_C(X,Y)&lt;/script&gt;,&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\eta_Y\circ F(f)=G(f)\circ\eta_X&lt;/script&gt;

&lt;p&gt;I.e computing in the world of &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; then transforming to the world of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is the same as transforming to the world of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; then computing in the world of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Two functors &lt;script type=&quot;math/tex&quot;&gt;F:C\to D&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;G:C\to D&lt;/script&gt; are naturally isomorphic if there is a natural tranformation &lt;script type=&quot;math/tex&quot;&gt;\eta:F\to G&lt;/script&gt; such that for all &lt;script type=&quot;math/tex&quot;&gt;x\in\ob(C)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\eta_x&lt;/script&gt; is an isomorphism.&lt;/p&gt;

&lt;p&gt;Categories include sets, groups and topologies.&lt;/p&gt;

&lt;p&gt;Most categories include special objects, and the challenge is to define these special objects using only the concepts of category theory.&lt;/p&gt;

&lt;p&gt;These characterizations define universal properties, which can be applied to any categories.&lt;/p&gt;

&lt;p&gt;The concepts of limits and colimits are central for the definition of universal properties.&lt;/p&gt;

&lt;p&gt;Two categories are equivalent if they are essentially the same.&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; be categories. The functor category $D^C$ is the category whose objects are the functros from &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; and the arrows are the natural transformations of these functors.&lt;/p&gt;

&lt;p&gt;The Yodena lemma describes reprentable functors in functor categories.&lt;/p&gt;

&lt;p&gt;For every statement true in a category &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt;, its dual is true in the dual category &lt;script type=&quot;math/tex&quot;&gt;C^\mathrm{op}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;A functor can be left or right adjoint to another functor that maps in the opposite direction.&lt;/p&gt;

&lt;p&gt;A 2-category is a category with objects, morphisms, and morphisms between morphisms.&lt;/p&gt;

&lt;p&gt;This idea can be generalized to &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-categories, and even &lt;script type=&quot;math/tex&quot;&gt;\omega&lt;/script&gt;-categories.&lt;/p&gt;

&lt;p&gt;A monoidal category has only one object.&lt;/p&gt;

&lt;p&gt;Higher-dimensional categories require exchange laws to hold.&lt;/p&gt;

&lt;p&gt;Bicategories are a weaker notion of 2-category.&lt;/p&gt;

&lt;p&gt;Higher-dimensional categories are part of higher-dimensional algebra.&lt;/p&gt;

&lt;p&gt;In 1942-45, Samuel Eilenberg and Saunders Mac Lane introduced categories, functors, and natural transformations as part of their work in algebraic topology.&lt;/p&gt;

&lt;p&gt;This allowed the transition from geometric homology to axiomatic homology theory.&lt;/p&gt;

&lt;p&gt;The goal was to understand natural transformations.&lt;/p&gt;

&lt;p&gt;Emmy Noether worked on formalizing abstract processes, and proposed with Mac Lane an axiomatic formalization of the relation between structures and the processes that preserve them.&lt;/p&gt;

&lt;p&gt;The ideas underlying category theory were current in the 1930s in Poland.&lt;/p&gt;

&lt;p&gt;Subsequent developments were powered by&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;computational needs of homological algebra&lt;/li&gt;
  &lt;li&gt;axiomatic needs of algebraic geometry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;General category theory came later.&lt;/p&gt;

&lt;p&gt;General category theory extends universal algebra.&lt;/p&gt;

&lt;p&gt;General category theory has features allowing semantic flexibility and higher-order logic.&lt;/p&gt;

&lt;p&gt;Topoi are categories which can serve as an alternative to axiomatic set theory as a foundation of mathematics.&lt;/p&gt;

&lt;p&gt;Current work in topoi as a foundation of mathematics aims at justifying constructive mathematics.&lt;/p&gt;

&lt;p&gt;Topos theory is a form of abstract sheaf theory.&lt;/p&gt;

&lt;p&gt;Topos theory leads to pointless topology.&lt;/p&gt;

&lt;p&gt;Categorical logic is based on type theory for intuitionistic logics.&lt;/p&gt;

&lt;p&gt;Categorical logic has applications in functional programming and domain theory.&lt;/p&gt;

&lt;p&gt;A cartesian closed category is taken as a non-syntactic description of a lambda calculus.&lt;/p&gt;

&lt;p&gt;John Baez has a shown a link between Feynman diagrams and monoidal categories.&lt;/p&gt;

&lt;p&gt;Topos theory has been applied to mathematical music theory by Guerino Mazzola.&lt;/p&gt;</content><author><name></name></author><summary type="html">Category theory</summary></entry><entry><title type="html">Trigonometric functions</title><link href="http://localhost:4000/maths/jekyll/update/2018/08/27/trigonometric-functions.html" rel="alternate" type="text/html" title="Trigonometric functions" /><published>2018-08-27T11:08:46+02:00</published><updated>2018-08-27T11:08:46+02:00</updated><id>http://localhost:4000/maths/jekyll/update/2018/08/27/trigonometric-functions</id><content type="html" xml:base="http://localhost:4000/maths/jekyll/update/2018/08/27/trigonometric-functions.html">&lt;p&gt;Hi guys.&lt;/p&gt;

&lt;p&gt;In this article, we present the six usual trigonometric functions, their derivatives, and the derivatives of their inverse.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\DeclareMathOperator{\arccot}{arccot}
\DeclareMathOperator{\arcsec}{arcsec}
\DeclareMathOperator{\arccsc}{arccsc}
\DeclareMathOperator{\arccsch}{arccsch}
\sinh x&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccsch x&lt;/script&gt;

&lt;p&gt;Sine and cosine&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sin x&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cos x&lt;/script&gt;

&lt;p&gt;Tangent&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tan x=\frac{\sin x}\cos{x}&lt;/script&gt;

&lt;p&gt;Cotangent&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cot x=\frac{1}{\tan x}&lt;/script&gt;

&lt;p&gt;Secant&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sec x=\frac{1}{\cos x}&lt;/script&gt;

&lt;p&gt;Cosecant&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\csc x=\frac{1}{\sin x}&lt;/script&gt;

&lt;h2 id=&quot;derivatives&quot;&gt;Derivatives&lt;/h2&gt;

&lt;h3 id=&quot;derivative-of-the-sine&quot;&gt;Derivative of the sine&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sin^\prime x=\lim_{h\to0}\frac{\sin(x+h)-\sin x}{h}&lt;/script&gt;

&lt;p&gt;Using &lt;script type=&quot;math/tex&quot;&gt;\sin(a+b)=\sin a\cos b+\cos a\sin b&lt;/script&gt;, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sin^\prime x=\lim_{h\to0}\frac{\sin x\cos h+\cos x\sin h-\sin x}{h}&lt;/script&gt;

&lt;p&gt;Then rearranging&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sin^\prime x=\sin x\left(\lim_{h\to0}\frac{\cos h-1}{h}\right)+\cos x\left(\lim_{h\to0}\frac{\sin h}{h}\right)&lt;/script&gt;

&lt;p&gt;Using &lt;script type=&quot;math/tex&quot;&gt;\displaystyle\lim_{x\to0}\frac{\sin x}{x}=1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\displaystyle\lim_{x\to0}\frac{\cos x-1}{x}=0&lt;/script&gt;, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\sin^\prime x=\cos x$}&lt;/script&gt;

&lt;h3 id=&quot;derivative-of-the-cosine&quot;&gt;Derivative of the cosine&lt;/h3&gt;

&lt;p&gt;To compute the derivative of the cosine, we use the identity &lt;script type=&quot;math/tex&quot;&gt;\cos^2 x+\sin^2 x=1&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cos^\prime x=\frac{d\sqrt{1-\sin^2 x}}{dx}&lt;/script&gt;

&lt;p&gt;This is only valid for those &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; for which &lt;script type=&quot;math/tex&quot;&gt;\cos x&lt;/script&gt; is positive. Applying the chain rule, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cos^\prime x=\frac{1}{2\sqrt{1-\sin^2 x}}\left(-2\sin x\right)\cos x&lt;/script&gt;

&lt;p&gt;Simplifying, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\cos^\prime x=-\sin x$}&lt;/script&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;\cos x&lt;/script&gt; is negative, then &lt;script type=&quot;math/tex&quot;&gt;\cos x=-\sqrt{1-\sin^2 x}&lt;/script&gt;, and&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cos^\prime x=-\frac{1}{2\sqrt{1-\sin^2 x}}(-2\sin x)\cos x&lt;/script&gt;

&lt;p&gt;which yields&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cos^\prime x=-\frac{1}{2(-\cos x)}(-2\sin x)\cos x&lt;/script&gt;

&lt;p&gt;After simplification, we get the same result&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\cos^\prime x=-\sin x$}&lt;/script&gt;

&lt;h3 id=&quot;derivative-of-the-tangent&quot;&gt;Derivative of the tangent&lt;/h3&gt;

&lt;p&gt;To derive the tangent, we simply use the derivation of quotients&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tan^\prime x=\frac{d}{dx}\left(\frac{\sin x}{\cos x}\right)=\frac{\sin^\prime x\cos x-\sin x\cos^\prime x}{\cos^2 x}=\frac{\cos^2 x+\sin^2 x}{\cos^2 x}=\frac{1}{\cos^2 x}=\sec^2 x&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\tan^\prime x=\sec^2 x$}&lt;/script&gt;

&lt;h3 id=&quot;derivative-of-the-cotangent&quot;&gt;Derivative of the cotangent&lt;/h3&gt;

&lt;p&gt;To derive the tangent, we use the derivation of the inverse&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cot^\prime x=\frac{d}{dx}\left(\frac{1}{\tan x}\right)=-\tan^\prime x\frac{1}{\tan^2 x}=-\sec^2 x\frac{\cos^2 x}{\sin^2 x}=-\frac{1}{\sin^2 x}=-\csc^2 x&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\cot^\prime x=-\csc^2 x$}&lt;/script&gt;

&lt;h3 id=&quot;derivative-of-the-secant&quot;&gt;Derivative of the secant&lt;/h3&gt;

&lt;p&gt;To derive the secant, we use the derivation of the inverse&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sec^\prime x=\frac{d}{dx}\left(\frac{1}{\cos x}\right)=-\cos^\prime x\frac{1}{\cos^2 x}=\frac{\sin x}{\cos^2 x}=\sec x\tan x&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\sec^\prime x=\sec x\tan x$}&lt;/script&gt;

&lt;h3 id=&quot;derivative-of-the-cosecant&quot;&gt;Derivative of the cosecant&lt;/h3&gt;

&lt;p&gt;To derive the cosecant, we use the derivation of the inverse&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\csc^\prime x=\frac{d}{dx}\left(\frac{1}{\sin x}\right)=-\sin^\prime x\frac{1}{\sin^2 x}=-\frac{\cos x}{\sin^2 x}=-\csc x\cot x&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\csc^\prime x=-\csc x\cot x$}&lt;/script&gt;

&lt;h2 id=&quot;derivatives-of-the-inverse-trigonometric-functions&quot;&gt;Derivatives of the inverse trigonometric functions&lt;/h2&gt;

&lt;p&gt;To derive the inverse function, we use the following identity&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left(f^{-1}\right)^\prime(x)=\frac{1}{f^\prime(f^{-1}(x))}&lt;/script&gt;

&lt;h3 id=&quot;derivative-of-the-inverse-sine&quot;&gt;Derivative of the inverse sine&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arcsin^\prime x=\frac{1}{\sin^\prime(\arcsin x))}=\frac{1}{\cos(\arcsin x))}&lt;/script&gt;

&lt;p&gt;Therefore, when &lt;script type=&quot;math/tex&quot;&gt;\cos x&lt;/script&gt; is positive,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arcsin^\prime (\sin x)=\frac{1}{\cos(\arcsin (\sin x)))}=\frac{1}{\cos x}=\frac{1}{\sqrt{1-\sin^2 x}}&lt;/script&gt;

&lt;p&gt;Substituting &lt;script type=&quot;math/tex&quot;&gt;\sin x&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\arcsin^\prime x=\frac{1}{\sqrt{1-x^2}}$}&lt;/script&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\cos x&lt;/script&gt; is positive from &lt;script type=&quot;math/tex&quot;&gt;-\pi/2&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\pi/2&lt;/script&gt;, but on this interval, &lt;script type=&quot;math/tex&quot;&gt;\sin x&lt;/script&gt; goes from &lt;script type=&quot;math/tex&quot;&gt;-1&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;, i.e. &lt;script type=&quot;math/tex&quot;&gt;\sin x&lt;/script&gt; spans the whole range of the sine function, which is the whole domain of the inverse sine function.&lt;/p&gt;

&lt;p&gt;Therefore, we do not need to consider the case where &lt;script type=&quot;math/tex&quot;&gt;\cos x&lt;/script&gt; is negative because we assume the range of &lt;script type=&quot;math/tex&quot;&gt;\arcsin&lt;/script&gt; to be &lt;script type=&quot;math/tex&quot;&gt;[-\pi/2,\pi/2]&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;derivative-of-the-inverse-cosine&quot;&gt;Derivative of the inverse cosine&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccos^\prime x=\frac{1}{\cos^\prime(\arccos x))}=-\frac{1}{\sin(\arccos x))}&lt;/script&gt;

&lt;p&gt;Therefore, when &lt;script type=&quot;math/tex&quot;&gt;\sin x&lt;/script&gt; is positive,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccos^\prime (\cos x)=-\frac{1}{\sin(\arccos (\cos x)))}=-\frac{1}{\sin x}=-\frac{1}{\sqrt{1-\cos^2 x}}&lt;/script&gt;

&lt;p&gt;Substituting &lt;script type=&quot;math/tex&quot;&gt;\cos x&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\arccos^\prime x=-\frac{1}{\sqrt{1-x^2}}$}&lt;/script&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\sin x&lt;/script&gt; is positive on &lt;script type=&quot;math/tex&quot;&gt;[0,\pi]&lt;/script&gt;, and on this interval, &lt;script type=&quot;math/tex&quot;&gt;\cos x&lt;/script&gt; goes from &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;-1&lt;/script&gt;, so we do not need to consider the case where &lt;script type=&quot;math/tex&quot;&gt;\sin x&lt;/script&gt; is negative when we define the range of &lt;script type=&quot;math/tex&quot;&gt;\arccos x&lt;/script&gt; to be &lt;script type=&quot;math/tex&quot;&gt;[0,\pi]&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;derivative-of-the-inverse-tangent&quot;&gt;Derivative of the inverse tangent&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arctan^\prime x=\frac{1}{\tan^\prime(\arctan x)}=\frac{1}{\sec^2(\arctan x)}&lt;/script&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arctan^\prime (\tan x)=\frac{1}{\sec^2(\arctan (\tan x))}=\frac{1}{\sec^2 x}&lt;/script&gt;

&lt;p&gt;Now, we need to express &lt;script type=&quot;math/tex&quot;&gt;\tan x&lt;/script&gt; as a function of &lt;script type=&quot;math/tex&quot;&gt;\sec^2 x&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tan^2 x=\frac{\sin^2 x}{\cos^2 x}=\sec^2 x\sin^2 x=\sec^2 x(1-\cos^2 x)=\sec^2 x\left(1-\frac{1}{\sec^2 x}\right)=\sec^2 x-1&lt;/script&gt;

&lt;p&gt;Which yields&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sec^2 x=1+\tan^2 x&lt;/script&gt;

&lt;p&gt;Therefore&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arctan^\prime (\tan x)=\frac{1}{\sec^2 x}=\frac{1}{1+\tan^2 x}&lt;/script&gt;

&lt;p&gt;Substituting &lt;script type=&quot;math/tex&quot;&gt;\tan x&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\arctan^\prime x=\frac{1}{1+x^2}$}&lt;/script&gt;

&lt;h3 id=&quot;derivative-of-the-inverse-cotangent&quot;&gt;Derivative of the inverse cotangent&lt;/h3&gt;

&lt;p&gt;The computation is quite similar to that of the inverse tangent.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccot^\prime x=\frac{1}{\cot^\prime(\arccot x)}=-\frac{1}{\csc^2(\arccot x)}&lt;/script&gt;

&lt;p&gt;Therefore&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccot^\prime (\cot x)=-\frac{1}{\csc^2(\arccot (\cot x))}=-\frac{1}{\csc^2 x}&lt;/script&gt;

&lt;p&gt;We need to express &lt;script type=&quot;math/tex&quot;&gt;\csc^2 x&lt;/script&gt; as a function of &lt;script type=&quot;math/tex&quot;&gt;\cot x&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cot^2 x=\frac{\cos^2 x}{\sin^2 x}=\csc^2 x\left(1-\frac{1}{\csc^2 x}\right)=\csc^2 x-1&lt;/script&gt;

&lt;p&gt;which yields&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\csc^2x=1+\cot^2 x&lt;/script&gt;

&lt;p&gt;Therefore&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccot^\prime (\cot x)=-\frac{1}{\csc^2 x}=-\frac{1}{1+\cot^2 x}&lt;/script&gt;

&lt;p&gt;and substituting &lt;script type=&quot;math/tex&quot;&gt;\cot x&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\arccot^\prime x=-\frac{1}{1+x^2}$}&lt;/script&gt;

&lt;h3 id=&quot;derivation-of-the-inverse-secant&quot;&gt;Derivation of the inverse secant&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arcsec^\prime x=\frac{1}{\sec^\prime(\arcsec x)}=\frac{1}{\sec(\arcsec x)\tan(\arcsec x)}&lt;/script&gt;

&lt;p&gt;Therefore&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arcsec^\prime (\sec x)=\frac{1}{\sec(\arcsec (\sec x))\tan(\arcsec (\sec x))}=\frac{1}{\sec x\tan x}&lt;/script&gt;

&lt;p&gt;We need to rewrite &lt;script type=&quot;math/tex&quot;&gt;\sec x\tan x&lt;/script&gt; as a function of &lt;script type=&quot;math/tex&quot;&gt;\sec x&lt;/script&gt; only. Assuming &lt;script type=&quot;math/tex&quot;&gt;\sin x&lt;/script&gt; positive,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sec x\tan x=\sec x\frac{\sin x}{\cos x}=\sec^2 x\sin x=\sec^2 x\sqrt{1-\cos^2 x}=\sec^2 x\sqrt{1-\frac{1}{\sec^2 x}}&lt;/script&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arcsec^\prime (\sec x)=\frac{1}{\sec^2 x\sqrt{1-\frac{1}{\sec^2 x}}}&lt;/script&gt;

&lt;p&gt;and substituting &lt;script type=&quot;math/tex&quot;&gt;\sec x&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\arcsec^\prime x=\frac{1}{x^2 \sqrt{1-\frac{1}{x^2}}}$}&lt;/script&gt;

&lt;p&gt;If we take the range of &lt;script type=&quot;math/tex&quot;&gt;\sec x&lt;/script&gt; to be &lt;script type=&quot;math/tex&quot;&gt;[0,\pi/2]&lt;/script&gt;, then the case &lt;script type=&quot;math/tex&quot;&gt;\sin x&lt;/script&gt; negative never occurs.&lt;/p&gt;

&lt;h3 id=&quot;derivation-of-the-inverse-cosecant&quot;&gt;Derivation of the inverse cosecant&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccsc^\prime x=\frac{1}{\csc^\prime(\arccsc x)}=-\frac{1}{\csc(\arccsc x)\cot(\arccsc x)}&lt;/script&gt;

&lt;p&gt;Therefore&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccsc^\prime (\csc x)=-\frac{1}{\csc(\arccsc (\csc x))\cot(\arccsc (\csc x))}=-\frac{1}{\csc x\cot x}&lt;/script&gt;

&lt;p&gt;We need to rewrite &lt;script type=&quot;math/tex&quot;&gt;\csc x\cot x&lt;/script&gt; as a function of &lt;script type=&quot;math/tex&quot;&gt;\csc x&lt;/script&gt; only. Assuming &lt;script type=&quot;math/tex&quot;&gt;\csc x&lt;/script&gt; positive,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\csc x\cot x=\csc x\frac{\cos x}{\sin x}=\csc^2 x\cos x=\csc^2 x\sqrt{1-\sin^2 x}=\csc^2 x\sqrt{1-\frac{1}{\csc^2 x}}&lt;/script&gt;

&lt;p&gt;Therefore&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccsc^\prime (\csc x)=-\frac{1}{\csc^2 x\sqrt{1-\frac{1}{\csc^2 x}}}&lt;/script&gt;

&lt;p&gt;And substituting &lt;script type=&quot;math/tex&quot;&gt;\csc x&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, we get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\arccsc^\prime x=-\frac{1}{x^2\sqrt{1-\frac{1}{x^2}}}$}&lt;/script&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;So far, we know&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arcsin^\prime x=\frac{1}{\sqrt{1-x^2}}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccos^\prime x=-\frac{1}{\sqrt{1-x^2}}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arctan^\prime x=\frac{1}{1+x^2}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccot^\prime x=-\frac{1}{1+x^2}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arcsec^\prime x=\frac{1}{x^2 \sqrt{1-\frac{1}{x^2}}}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arccsc^\prime x=-\frac{1}{x^2\sqrt{1-\frac{1}{x^2}}}&lt;/script&gt;

&lt;h2 id=&quot;primitive-of-the-inverse-trigonometric-functions&quot;&gt;Primitive of the inverse trigonometric functions&lt;/h2&gt;

&lt;p&gt;To compute the primitive of a function, we use the following identity, which we derive using integration by parts&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int f^{-1}(x)dx=x f^{-1}(x)-\int x \left(f^{-1}\right)^\prime(x)dx&lt;/script&gt;

&lt;p&gt;For readability, we omit the integration constant in all the results.&lt;/p&gt;

&lt;h3 id=&quot;primitive-of-the-inverse-sine&quot;&gt;Primitive of the inverse sine&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int\arcsin x dx=x\arcsin x-\int x\arcsin^\prime x dx&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int x\arcsin^\prime x dx=\int\frac{x}{\sqrt{1-x^2}}dx&lt;/script&gt;

&lt;p&gt;With &lt;script type=&quot;math/tex&quot;&gt;u=1-x^2&lt;/script&gt;, we have &lt;script type=&quot;math/tex&quot;&gt;du=-2xdx&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;dx=-\frac{du}{2}&lt;/script&gt;, which yields&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int x\arcsin^\prime x dx=\int\frac{x}{\sqrt{1-x^2}}dx=-\frac{1}{2}\int\frac{du}{\sqrt{u}}=-\frac{1}{2}\left(\frac{2}{1}\sqrt{u}\right)=-\sqrt{u}=-\sqrt{1-x^2}&lt;/script&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\int\arcsin x dx=x\arcsin x+\sqrt{1-x^2}$}&lt;/script&gt;

&lt;h3 id=&quot;primitive-of-the-inverse-cosine&quot;&gt;Primitive of the inverse cosine&lt;/h3&gt;

&lt;p&gt;The computation is very similar to that of the inverse sine.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int\arccos x dx=x\arccos x-\int x\arccos^\prime x dx&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int x\arccos^\prime x dx=-\int\frac{x}{\sqrt{1-x^2}}dx=\sqrt{1-x^2}&lt;/script&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\int\arccos x dx=x\arccos x-\sqrt{1-x^2}$}&lt;/script&gt;

&lt;h3 id=&quot;primitive-of-the-inverse-tangent&quot;&gt;Primitive of the inverse tangent&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int\arctan x dx=x\arctan x-\int x\arctan^\prime x dx&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int x\arctan^\prime x dx=\int \frac{x}{1+x^2} dx&lt;/script&gt;

&lt;p&gt;With &lt;script type=&quot;math/tex&quot;&gt;u=1+x^2&lt;/script&gt;, we have &lt;script type=&quot;math/tex&quot;&gt;du=2 x dx&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;x dx=\frac{du}{2}&lt;/script&gt;, which yields&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{x}{1+x^2} dx=\frac{1}{2}\int\frac{du}{u}=\frac{1}{2}\ln|u|=\frac{1}{2}\ln|1+x^2|=\ln\sqrt{1+x^2}&lt;/script&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\int\arctan x dx=x\arctan x-\ln\sqrt{1+x^2}$}&lt;/script&gt;

&lt;h3 id=&quot;primitive-of-the-inverse-cotangent&quot;&gt;Primitive of the inverse cotangent&lt;/h3&gt;

&lt;p&gt;The computation is very similar to that of the inverse tangent.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int\arccot x dx=x\arccot x-\int x\arccot^\prime x dx&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int x\arccot^\prime x dx=-\int\frac{x}{1+x^2}dx=-\ln\sqrt{1+x^2}&lt;/script&gt;

&lt;p&gt;Therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\fbox{$\int\arccot x dx=x\arccot x+\ln\sqrt{1+x^2}$}&lt;/script&gt;

&lt;h3 id=&quot;primitive-of-the-inverse-secant&quot;&gt;Primitive of the inverse secant&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int\arcsec x dx=x\arcsec x-\int x\arcsec^\prime x dx&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int x\arcsec^\prime x dx=\int\frac{x}{x^2 \sqrt{1-\frac{1}{x^2}}}dx=\int\frac{1}{x \sqrt{1-\frac{1}{x^2}}}dx&lt;/script&gt;</content><author><name></name></author><summary type="html">Hi guys.</summary></entry></feed>